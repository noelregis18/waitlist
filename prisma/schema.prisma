// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String?
  lastName      String?
  companyName   String?
  role          String    @default("USER")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile?
  transactions  Transaction[]
  accounts      Account[]
  incomeSources IncomeSource[]
  incomeSplit   IncomeSplit?
}

model Profile {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  phoneNumber   String?
  address       String?
  city          String?
  state         String?
  country       String?
  postalCode    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type          String    // CHECKING, SAVINGS, INVESTMENT, BUSINESS
  balance       Float     @default(0)
  currency      String    @default("USD")
  accountNumber String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  transactions  Transaction[]
}

model Transaction {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId     String
  account       Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  type          String    // DEPOSIT, WITHDRAWAL, TRANSFER, PAYMENT
  amount        Float
  description   String?
  status        String    @default("PENDING") // PENDING, COMPLETED, FAILED, CANCELLED
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model IncomeSource {
  id          String   @id @default(cuid())
  userId      String
  type        String
  amount      Float
  frequency   String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model IncomeSplit {
  id                    String   @id @default(cuid())
  userId                String   @unique
  strategy              String
  needsPercentage       Float
  wantsPercentage       Float
  savingsPercentage     Float
  investmentsPercentage Float
  totalMonthlyIncome    Float
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id])

  @@index([userId])
} 